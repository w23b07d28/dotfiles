#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2017-2021 Dominik Salvet
# https://github.com/dominiksalvet/asus-fan-control
#-------------------------------------------------------------------------------
# DESCRIPTION:
#   This is asus-fan-control, fan control for ASUS devices running Linux.
# PARAMETERS:
#   All given arguments are processed as asus-fan-control's help describes.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# MAIN FUNCTION
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   This is the asus-fan-control entry point and it is expected to be executed
#   first, yet its calling should be at the end of this script.
# PARAMETERS:
#   $@ - asus-fan-control arguments
main() {
    init_constants &&
    init_strings &&
    init_paths &&
    init_config &&
    process_args "$@" # process all given asus-fan-control arguments
}

#-------------------------------------------------------------------------------
# STATIC INITIALIZATION
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Initializes static constants.
init_constants() {
    # the current version of asus-fan-control
    readonly VERSION=3.12.0

    # ACPI related constants
    readonly ACPI_WRITE_COMMAND='\_SB.PCI0.LPCB.EC0.WRAM' # write to ACPI
    readonly ACPI_READ_COMMAND='\_SB.PCI0.LPCB.EC0.RRAM' # read from ACPI
}

# DESCRIPTION:
#   Initializes strings used to display output to end users. Constants must be
#   already initialized.
init_strings() {
    readonly HELP_MESSAGE='USAGE:
  asus-fan-control [set-temps default | TEMPERATURES]
  asus-fan-control get-temps | model-info | help | about

COMMAND:
  set-temps   apply and store fan temperatures
  get-temps   get fan temperatures
  model-info  show device model information'

    readonly ABOUT_MESSAGE="asus-fan-control $VERSION
Fan control for ASUS devices running Linux.

Copyright 2017-2021 Dominik Salvet
https://github.com/dominiksalvet/asus-fan-control"

    readonly CONTRIBUTE_MESSAGE='
  Hello, I am very happy you have chosen to try out asus-fan-control (AFC).
  AFC is an open-source project and without community contributions there
  would not be so many devices tested. It appears you have an untested device
  and so if AFC works on it, please consider letting the AFC developers know
  this fact on the official AFC GitHub. Then, your device will be recognized
  as tested, which may significantly help people with the same device. See the
  contributing.md file for more details. Thank you.
                                              - Dominik Salvet, the AFC author
'
}

# DESCRIPTION:
#   Initializes all asus-fan-control's paths. They must be absolute paths.
init_paths() {
    # base asus-fan-control directories (respect FHS)
    readonly DATA_DIR=/usr/share/asus-fan-control # base data directory
    readonly CONFIG_DIR=/etc/asus-fan-control # base configuration directory

    # derived asus-fan-control file paths
    # readonly MODELS_PATH="$DATA_DIR"/models # models database
    readonly TEMPS_PATH="$CONFIG_DIR"/temps # stored temperatures

    # ACPI related
    readonly ACPI_CALL_PATH=/proc/acpi/call # ACPI interface file location

    # device information
    readonly MODEL_NAME_PATH=/sys/class/dmi/id/product_name # model name
}

# DESCRIPTION:
#   Initializes asus-fan-control configuration constants.
init_config() {
    # set fallback model attributes respecting the environment
    readonly FALLBACK_ADDRS="${FALLBACK_ADDRS:-1335}" # base ACPI fan addresses
    readonly FALLBACK_TEMPS="${FALLBACK_TEMPS:-55 60 62 65 68 72 76 80}"
}

#-------------------------------------------------------------------------------
# ARGUMENT PROCESSING
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Processes given asus-fan-control arguments and performs all associated
#   operations.
# PARAMETERS:
#   $@ - asus-fan-control arguments
process_args() (
    if [ "$#" -eq 0 ]; then # if no argument given
        init_runtime && set_stored_temps # use stored temperatures
    else
        case "$1" in # process arguments based on the first argument
            set-temps) init_runtime && shift && set_temps "$*" ;;
            get-temps) init_runtime && get_temps ;;
            model-info) init_runtime && model_info ;;
            help) echo "$HELP_MESSAGE" ;;
            about) echo "$ABOUT_MESSAGE" ;;
            *) echo "invalid argument $1" >&2; return 1 ;;
        esac
    fi
)

# DESCRIPTION:
#   Prints obtained information about the current device model.
model_info() {
    echo "name $MODEL_NAME" &&
    echo "addresses $MODEL_ADDRS" &&
    echo "default-temps $MODEL_TEMPS" &&
    echo "tested $MODEL_TESTED" &&

    if [ "$MODEL_TESTED" = false ]; then # motivate to contribute if it works
        echo "$CONTRIBUTE_MESSAGE" >&2
    fi
}

#-------------------------------------------------------------------------------
# RUNTIME INITIALIZATION
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Initializes asus-fan-control runtime - it checks whether ACPI is available,
#   prepares information about the current device model and checks whether this
#   information is valid.
init_runtime() {
    check_acpi && # check whether ACPI is available and accessible
    init_model && # get information about current device
    check_model # check whether obtained information looks valid
}

# DESCRIPTION:
#   Initializes information about the current device model. Also considers
#   current environment variables.
init_model() {
    # this variable name shall not be used outside this function
    _model="$(get_host_model)" && # get current device model
    # extract and derive model information
    MODEL_NAME="$(get_model_name "$_model")" &&
    MODEL_ADDRS="$(get_model_addrs "$_model")" &&
    MODEL_TEMPS="$(get_model_temps "$_model")" &&
    MODEL_TEMPS_COUNT="$(echo "$MODEL_TEMPS" | wc -w)" &&
    MODEL_TESTED="$(get_model_tested "$_model")" &&

    # model information should be exposed as global constants
    readonly MODEL_NAME MODEL_ADDRS MODEL_TEMPS MODEL_TEMPS_COUNT MODEL_TESTED
}

# DESCRIPTION:
#   Checks whether current device information, which may be affected by current
#   environment, is valid.
check_model() (
    for addr in $MODEL_ADDRS; do # check base ACPI fan addresses
        if ! [ "$addr" -ge 0 ] 2>/dev/null; then # check each address
            echo "invalid model addresses $MODEL_ADDRS" >&2; return 1
        fi
    done

    if ! [ "$MODEL_TEMPS_COUNT" -gt 0 ] 2>/dev/null; then # check temps count
        echo "invalid model temperatures count $MODEL_TEMPS_COUNT" >&2; return 1
    fi

    if ! check_temps "$MODEL_TEMPS"; then # check temperatures
        echo "invalid model temperatures $MODEL_TEMPS" >&2; return 1
    fi
)

# DESCRIPTION:
#   Checks whether a given argument represents valid temperatures.
# PARAMETERS:
#   $1 - any
check_temps() (
    temps_count=0; previous_temp=0 # prepare initial state
    for temp in $1; do # for each word in the argument (for each temperature)
        test "$temp" -ge "$previous_temp" 2>/dev/null && # must not be less
        previous_temp="$temp" && # store as previous
        temps_count="$((temps_count + 1))" || return # increase temps count
    done

    # check that temperatures count is matching the current model
    test "$temps_count" -eq "$MODEL_TEMPS_COUNT"
)

#-------------------------------------------------------------------------------
# MODELS
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Detects the current device model and prints its first database record if it
#   exists. Otherwise, prints a made up database record based on fallback
#   constants. The database record is extended by the information about the
#   model presence in the models database.
get_host_model() (
    host_model_name="$(get_host_model_name)" && # automatically detect host

    while IFS= read -r model; do # for each database record
        model_name="$(get_model_name "$model")" || return # extract its name
        if [ "$model_name" = "$host_model_name" ]; then # compare with the host
            echo "$model|true"; return # if match, print the record and return
        fi
    done < "$MODELS_PATH" &&

    echo "$host_model_name|$FALLBACK_ADDRS|$FALLBACK_TEMPS|false" # fallback
)

# DESCRIPTION:
#   Prints the current device model name while keeping only alphanumerical
#   characters.
get_host_model_name() (
    model_name="$(cat "$MODEL_NAME_PATH")" && # detect host
    echo "$model_name" | tr -d -c '[:alnum:]' # keep alphanumerical characters
)

# DESCRIPTION:
#   Extracts the model name from a given model record.
# PARAMETERS:
#   $1 - model record
get_model_name() {
    echo "$1" | cut -f 1 -d '|' -s
}

# DESCRIPTION:
#   Extracts the model base addresses from a given model record.
# PARAMETERS:
#   $1 - model record
get_model_addrs() {
    echo "$1" | cut -f 2 -d '|' -s
}

# DESCRIPTION:
#   Extracts the model temperatures from a given model record.
# PARAMETERS:
#   $1 - model record
get_model_temps() {
    echo "$1" | cut -f 3 -d '|' -s
}

# DESCRIPTION:
#   Prints whether the device model of a given extended model record was tested.
# PARAMETERS:
#   $1 - model record
get_model_tested() {
    echo "$1" | cut -f 4 -d '|' -s
}

#-------------------------------------------------------------------------------
# SET TEMPERATURES
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   If stored temperatures exist, checks them and applies them. Otherwise,
#   applies default ones and stores them. Runtime must be already initialized.
set_stored_temps() (
    if ! [ -r "$TEMPS_PATH" ]; then # if stored temperatures do not exist
        set_default_temps; return # use default temperatures and return early
    fi

    # otherwise, there are stored temperatures
    temps="$(cat "$TEMPS_PATH")" || return # load temperatures from the file
    if ! check_temps "$temps"; then # check them
        echo "invalid stored temperatures $temps" >&2; return 1
    fi

    write_temps "$MODEL_ADDRS" "$temps" # apply temperatures
)

# DESCRIPTION:
#   Applies given temperatures (or default ones in case 'default' is delivered)
#   and store them. Runtime must be already initialized.
# PARAMETERS:
#   $1 - temperatures
set_temps() {
    if ! [ "$1" ]; then # if no temperatures provided
        echo 'no temperatures for setting provided' >&2; return 1
    fi

    if [ "$1" = default ]; then # default model temperatures
        set_default_temps
    else # custom delivered temperatures
        set_custom_temps "$1"
    fi
}

# DESCRIPTION:
#   Applies default temperatures and stores them.
set_default_temps() {
    write_temps "$MODEL_ADDRS" "$MODEL_TEMPS" && # apply temperatures
    store_temps "$MODEL_TEMPS" # after success, store temperatures
}

# DESCRIPTION:
#   Checks given temperatures, applies them and stores them.
# PARAMETERS:
#   $1 - temperatures
set_custom_temps() {
    if ! check_temps "$1"; then # check temperatures whether they are valid
        echo "invalid custom temperatures $1" >&2; return 1
    fi

    write_temps "$MODEL_ADDRS" "$1" && # apply temperatures
    store_temps "$1" # after success, store temperatures
}

# DESCRIPTION:
#   Stores given temperatures into the temps file for later use.
# PARAMETERS:
#   $1 - temperatures
store_temps() {
    mkdir -p "$CONFIG_DIR"/ && # create the configuration directory
    echo "$1" > "$TEMPS_PATH" # store the temperatures into a file
}

#-------------------------------------------------------------------------------
# GET TEMPERATURES
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Prints applied fan temperatures. Runtime must be already initialized.
get_temps() (
    # get the first model address the same way temperatures are iterated
    for model_addr in $MODEL_ADDRS; do break; done && # break immediately
    read_temps "$model_addr" "$MODEL_TEMPS_COUNT" # get ACPI temperatures
)

#-------------------------------------------------------------------------------
# WRITE AND READ TEMPERATURES
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Sets given fan temperatures using ACPI calls based on given base addresses.
# PARAMETERS:
#   $1 - base addresses
#   $2 - temperatures
write_temps() (
    for addr in $1; do # for each base address
        temps_count=0 # current temperature index
        for temp in $2; do # for each temperature
            # write the current temperature to ACPI
            write_acpi_temp "$((addr + temps_count))" "$temp" &&
            temps_count="$((temps_count + 1))" || return # next temperature
        done
    done
)

# DESCRIPTION:
#   Prints fan temperatures using ACPI calls based on a given base address and
#   the number of the temperatures.
# PARAMETERS:
#   $1 - base address
#   $2 - number of temperatures
read_temps() (
    temps= # list of read temperatures

    temps_count=0 # current temperature index
    while [ "$temps_count" -lt "$2" ]; do # read all temperatures
        # read the temperature of the current index from ACPI
        temp="$(read_acpi_temp "$(($1 + temps_count))")" &&
        temps="$temps $temp" && # add temperature to list
        temps_count="$((temps_count + 1))" || return # next temperature
    done

    echo "${temps# }" # print read temperatures (omitting the first space)
)

#-------------------------------------------------------------------------------
# ACPI
#-------------------------------------------------------------------------------

# DESCRIPTION:
#   Checks whether it is possible to perform an ACPI call.
check_acpi() (
    if ! [ -f "$ACPI_CALL_PATH" ]; then # check if ACPI interface file exists
        echo "file $ACPI_CALL_PATH does not exist" >&2; return 1
    fi

    id_out="$(id -u)" && # check if running as root
    if [ "$id_out" -ne 0 ]; then
        echo 'root permissions needed' >&2; return 1
    fi
)

# DESCRIPTION:
#   Writes a given temperature value to a given ACPI address.
# PARAMETERS:
#   $1 - address
#   $2 - temperature
write_acpi_temp() (
    # ACPI write call (invalid arguments may cause the current shell to exit)
    echo "$ACPI_WRITE_COMMAND ${1:?} ${2:?}" > "$ACPI_CALL_PATH" &&
    get_acpi_result > /dev/null # only check whether write was successful
)

# DESCRIPTION:
#   Prints a temperature value of a given ACPI address in a decimal form.
# PARAMETERS:
#   $1 - address
read_acpi_temp() (
    echo "$ACPI_READ_COMMAND ${1:?}" > "$ACPI_CALL_PATH" && # ACPI read call
    temp="$(get_acpi_result)" && # retrieve the ACPI call result
    temp="$(echo "$temp" | cut -c 1-4)" && # parse temperature of the output
    temp="$((temp))" && # convert from hexadecimal to decimal
    echo "$temp" # print the final temperature value
)

# DESCRIPTION:
#   Reads and prints the previous ACPI call result, fails on detected errors.
get_acpi_result() (
    result="$(tr -d '\0' < "$ACPI_CALL_PATH")" &&

    if echo "$result" | grep -qi error; then
        echo "acpi call failed with '$result'" >&2; return 1
    else
        echo "$result"
    fi
)

#-------------------------------------------------------------------------------
# CALL MAIN
#-------------------------------------------------------------------------------

main "$@" # call the main function, having all functions above already defined
